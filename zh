#!/bin/bash

hosts="ops/$3"
if [ -z "$3" ]; then
  hosts='ops/staging'
fi

# Helpers
separator () {
    echo '------------------------------------------------------------------------------'
}

print_hosts () {
    separator
    echo "Hosts:   $(basename $hosts)"
    separator
}

DB_NAME='zoomhub_test'

# Commands
case "$1" in
init)
    brew install https://raw.githubusercontent.com/Homebrew/homebrew/bda8d64e0e9011aab1612868eac2f709e631c503/Library/Formula/haskell-stack.rb
    stack setup
    ;;
lint)
    stack exec hlint src
    ;;
format)
    git diff-files --quiet
    HAS_GIT_UNSTAGED_CHANGES=$?
    if [[ "$HAS_GIT_UNSTAGED_CHANGES" != "0" ]] ; then
        echo 'Commit all changes to Git before running `./zh lint`'
        exit 1
    fi
    git ls-files | grep --invert 'vendor/' | grep '.hs$' | xargs stylish-haskell --inplace
    ;;
ops)
    case "$2" in
    bootstrap)
        separator
        echo 'WARNING: Running ./zh ops bootstrap more than once will fail'
        echo '         as `root` user will no longer have password access to '
        echo '         the server.'
        separator
        echo "Hosts:   $(basename $hosts)"
        separator
        echo 'Enter `root` SSH password:'
        ansible-playbook --inventory-file "$hosts" \
            ops/user.yml --user root --ask-pass \
            --extra-vars "sudoers=y username=admin"
        ;;
    ping)
        print_hosts
        ansible --inventory-file "$hosts" all -m ping
        ;;
    setup-admin-server)
        ansible-playbook -v --inventory-file ops/admin \
            --ask-sudo --ask-vault-pass \
            ops/admin.yml
        ;;
    setup-web-server)
        print_hosts

        echo 'Enter `admin` user password:'
        ansible-playbook -v --inventory-file "$hosts" \
            --ask-sudo --ask-vault-pass \
            ops/web.yml
        ;;
    *)
        echo "Unknown command: $0 $@. Try $0 $1 \
bootstrap|ping|setup-admin-server|setup-web-server"
        exit 1
    esac
    ;;
run)
    stack build --ghc-options='' \
                --file-watch \
                --exec ./scripts/run-development.sh
    ;;
test)
    dropdb --if-exists "$DB_NAME"
    createdb "$DB_NAME"
    psql --quiet "$DB_NAME" < ./data/zoomhub_test-pg-backup-2017-03-04.sql

    # See: https://github.com/commercialhaskell/stack/issues/2210
    MODULES="$2"
    stack test --test-arguments '-m "'"$MODULES"'"'

    dropdb "$DB_NAME"
    ;;

db)
    case "$2" in
    dump)
      pg_dump "$DB_NAME"
      ;;
    *)
        echo "Unknown command: $0 $@. Try $0 $1 \
dump"
        exit 1
    esac
    ;;

*)
    echo "Unknown command: $0 $@. Try: $0 format|init|lint|ops|run|test"
    ;;
esac
